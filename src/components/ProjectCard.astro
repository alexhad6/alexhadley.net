---
import type { ImageMetadata } from "astro";
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import { faArrowUpRightFromSquare } from "@fortawesome/free-solid-svg-icons";
import { siGithub, siPython } from "simple-icons";
import { Card, Chip, FontAwesomeIcon, SimpleIconsIcon, IconLink } from "@/components";

type Props = {
  /** The project to display. */
  project: CollectionEntry<"projects">;
};

const {
  project: {
    data: { title, imageName, url, pypiUrl, githubUrl, tools },
    render,
  },
} = Astro.props;

const primaryUrl = url ?? githubUrl;

const { Content } = await render();

let image: Promise<{ default: ImageMetadata }> | null = null;
if (imageName) {
  const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/*.png");
  const imagePath = `/src/assets/${imageName}`;
  if (images[imagePath]) {
    image = images[imagePath]();
  }
}
---

<Card>
  <div class="mb-4 flex flex-col">
    <div class="mb-2 flex items-center justify-between">
      <a href={primaryUrl} target="_blank">
        <h3 class="text-xl font-bold">{title}</h3>
      </a>
      <div class="flex gap-4">
        {
          url && (
            <IconLink href={url} label={`${title} Website`}>
              <FontAwesomeIcon icon={faArrowUpRightFromSquare} />
            </IconLink>
          )
        }
        {
          pypiUrl && (
            <IconLink href={pypiUrl} label={`${title} PyPI`}>
              <SimpleIconsIcon icon={siPython} />
            </IconLink>
          )
        }
        {
          githubUrl && (
            <IconLink href={githubUrl} label={`${title} GitHub`}>
              <SimpleIconsIcon icon={siGithub} />
            </IconLink>
          )
        }
      </div>
    </div>
    <div>
      <Content />
    </div>
    {
      image && (
        <div class="mt-4 flex justify-center">
          <a href={primaryUrl} target="_blank">
            <Image
              class="h-auto max-h-[200px] w-auto max-w-[250px] rounded-lg border border-slate-400 dark:border-slate-500 "
              src={image}
              alt={title}
            />
          </a>
        </div>
      )
    }
  </div>
  {
    tools && (
      <div class="flex flex-wrap gap-2.5">
        {Object.entries(tools).map(([toolName, toolUrl]) => (
          <Chip href={toolUrl}>{toolName}</Chip>
        ))}
      </div>
    )
  }
</Card>
